class Solution {
    int[][] dp = null;
    int total;
    public int numberOfWays(int pos, int sum, int[] nums, int target, int ans) {
        if(pos == nums.length) {
            if(sum == target) {
                return 1;
            } else {
                return 0;
            }
        }
        
        if(dp[pos][sum + total] != Integer.MIN_VALUE) {
            return dp[pos][sum + total];
        }
       
        ans = numberOfWays(pos + 1, sum + nums[pos], nums, target, ans);
        ans += numberOfWays(pos + 1, sum - nums[pos], nums, target, ans);
        dp[pos][sum + total] = ans;
        return ans;
    }
    public int findTargetSumWays(int[] nums, int target) {
        total = Arrays.stream(nums).sum();
        int k = (2 * total) + 1;
        dp = new int[nums.length][k];
        for(int[] row : dp) {
            Arrays.fill(row, Integer.MIN_VALUE);
        }
        return numberOfWays(0, 0, nums, target, 0);
    }
}
class Key {
    int index;
    int total;
    public Key(int index, int total) {
        this.index = index;
        this.total = total;
    }
}
class Solution {
    Map<Key, Integer> map = new HashMap<>();

    public int numberOfWays(int pos, int sum, int[] nums, int target, int ans) {
        Key key = new Key(pos, sum);
        
        if(pos == nums.length) {
            if(sum == target) {
                return ans + 1;
            } else {
                return ans;
            }
        }

        if(map.get(key) != null) {
            return map.get(key);
        }
       
        ans = numberOfWays(pos + 1, sum + nums[pos], nums, target, ans);
        ans = numberOfWays(pos + 1, sum - nums[pos], nums, target, ans);
        map.put(new Key(pos, sum), ans);
        return ans;
    }



    public int findTargetSumWays(int[] nums, int target) {
        return numberOfWays(0, 0, nums, target, 0);
        
    }
}


/*
    public int numberOfWays(int pos, int sum, int[] nums, int target, int ans) {
        if(pos == nums.length) {
            if(sum == target) {
                return ans + 1;
            } else {
                return ans;
            }
        }
        
        if(dp[pos][sum + total] != Integer.MIN_VALUE) {
            return dp[pos][sum + total];
        }
       
        int ans1 = numberOfWays(pos + 1, sum + nums[pos], nums, target, ans);
        int ans2 = numberOfWays(pos + 1, sum - nums[pos], nums, target, ans);
        dp[pos][sum + total] = ans1 + ans2;
        return ans1 + ans2;
    */
