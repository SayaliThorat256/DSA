class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        boolean[] recS = new boolean[V];
        
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                if(dfs(i, adj, visited, recS)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean dfs(int v, ArrayList<ArrayList<Integer>> adj, boolean[] visited, boolean[] recS){
        recS[v] = true;
        visited[v] = true;
        for(int i : adj.get(v)) {
            if(!visited[i]) {
                if(dfs(i, adj, visited, recS)) {
                    return true;
                } 
            } else if(recS[i]) {
                    return true;
                }
        }
        recS[v] = false;
        return false;
    }
}
