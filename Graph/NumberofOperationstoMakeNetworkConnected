class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(connections.length < n-1) {
            return -1;
        }
        boolean[] visited = new boolean[n];
        int ans = 0;
        
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
        for(int i = 0; i < n; i++) {
            map.put(i, new ArrayList<>());
            
        }
        for(int i = 0; i < connections.length; i++) {
             ArrayList<Integer> list = map.get(connections[i][0]);
             list.add(connections[i][1]);
              map.put(connections[i][0], list);
            
            list = map.get(connections[i][1]);
             list.add(connections[i][0]);
              map.put(connections[i][1], list);
        }
        
        
        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                ans++;
                dfs(visited, i, map, n);
            }
        }
        return ans - 1;
    }
    
    
    public void dfs(boolean[] visited, int i,  HashMap<Integer, ArrayList<Integer>> map , int n) {
        visited[i] = true;
        for(int j : map.get(i)) {
            if(!visited[j]) {
                dfs(visited, j, map, n);
            }
        }
    }
    
    
}
