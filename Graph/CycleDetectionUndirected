class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
       boolean[] visited = new boolean[V];
       
       
       for(int i = 0; i < V; i++) {
           if(!visited[i]) {
                if(isPresent(i, adj, visited, -1)) {
                    return true;
                }
           }
          
       }
       return false;
     }
     
     public boolean isPresent(int v, ArrayList<ArrayList<Integer>> adj, boolean[] visited, int parent) {
         visited[v] = true;
         for(int i : adj.get(v)) {
            if(!visited[i]) {
                if(isPresent(i, adj, visited, v)) {
                    return true;
                }
            } else if(i != parent) {
                return true;
            }
         }
         return false;
     }
     
}
