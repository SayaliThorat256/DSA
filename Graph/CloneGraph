/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node == null) {
            return node;
        }
        HashMap<Node, Node> map = new HashMap<>();
        return getClone(node, map);
    }
    
    
    public Node getClone(Node node, HashMap<Node, Node> map) {
        
        List<Node> list = node.neighbors;
        List<Node> newList = new ArrayList<>();
        Node newNode = new Node(node.val);
        map.put(node, newNode);
        
        for(Node neighbour : list) {
            if(map.get(neighbour) == null) {
                 Node newNeighbour = getClone(neighbour, map);     
                newList.add(newNeighbour);
            } else {
                newList.add(map.get(neighbour));
            }
        }
        newNode.neighbors = newList;
        return newNode;
    }
    
    
    
}
