class Solution {
    
    public void getStrings(int pos, String digits, HashMap<Character, String> map, List<String> powerSet, String str) {
      
        if(pos == digits.length()) {
             powerSet.add(str);
            return;
        }
        String s = map.get(digits.charAt(pos));
        for(int i = 0; i < s.length(); i++) {
            str = str + s.charAt(i);
            getStrings(pos + 1, digits, map,powerSet,  str);
            str = str.substring(0,str.length() - 1);
        }
        
    }
    
    public List<String> letterCombinations(String digits) {
        
        HashMap<Character, String> map = new HashMap<>();
        map.put('2',"abc");
        map.put('3',"def");
        map.put('4',"ghi");
        map.put('5',"jkl");
        map.put('6',"mno");
        map.put('7',"pqrs");
        map.put('8',"tuv");
        map.put('9',"wxyz");
        List<String> powerSet = new ArrayList<>();
        if(digits.length() == 0) {
            return powerSet;
        }
        getStrings(0, digits, map, powerSet,"");
        
        return powerSet;
    }
}
