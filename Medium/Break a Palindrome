class Solution {
    public String breakPalindrome(String palindrome) {
        if(palindrome.length() <= 1) {
            return "";
        }
        String result = "";
       /* for(int i = 0; i < palindrome.length(); i++) {
            if(palindrome.charAt(i) != 'a') {
                result = palindrome.substring(0, i) + 'a' + palindrome.substring(i + 1, palindrome.length());
                if(!isPalindrone(result)) {
                    return result;
                }
                
            }
        }*/
        
        StringBuilder sb = new StringBuilder(palindrome);
        
        for(int i = 0; i < palindrome.length() / 2; i++) {
            if(palindrome.charAt(i) != 'a') {
                sb.setCharAt(i, 'a');
                    return sb.toString();
                
            }
        }
        
        sb.setCharAt(palindrome.length() - 1, 'b');
        return sb.toString();
    }
    
    public boolean isPalindrone(String Str) {
        int l = 0;
        int h = Str.length() - 1;
        while(l < h) {
            if(Str.charAt(l) != Str.charAt(h)) {
                return false;
            }
            l++;
            h--;
        }
         return true;
    }
   
}
