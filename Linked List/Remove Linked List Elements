class Solution {
public ListNode recursion(ListNode head, int val) {
        if(head == null) {
            return null;
        }
        ListNode nextNode = recursion(head.next, val);
        if(head.val == val) {
            return nextNode;
        } else {
            head.next = nextNode;
        }
        return head;
    }
    
    public ListNode removeElements(ListNode head, int val) {
    return recursion(head, val);
    /*ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode current = dummy;
        while(current.next != null) {
            if(current.next.val == val) {
                current.next = current.next.next;
            } else {
                current = current.next;
            }
        }
        
        return dummy.next;*/
    
    /*
    
         ListNode dummy = new ListNode(-1);
        ListNode ans = dummy;
        while(head != null) {
            if(head.val != val) {
                ans.next = head;
                ans = ans.next;
            }
            head = head.next;
        }
        ans.next = null;
        
        return dummy.next;
        
    
    */
    
        boolean first = true;
        ListNode ans = null;
        ListNode prev = null;
        while(head != null) {
            if(head.val != val) {
                if(ans == null) {
                    ans = head;
                    first = false;
                }
                prev = head;
                head = head.next;
            } else {
                if(first) {
                   // ListNode temp = head;
                    head = head.next;
                    //temp.next = null;
                } else {
                    prev.next = head.next;
                    head = head.next;
                }
            }
        }
        return ans;
    }
}
