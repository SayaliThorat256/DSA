public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
       
       ListNode nodeA = headA;
        ListNode nodeB = headB;
        int m = 0;
        int n = 0;
         while(headA != null) {
            m++;
            headA = headA.next;
        }
        
        while(headB != null) {
            n++;
            headB = headB.next;
        }
        
        if(m > n) {
            while(m != n) {
                nodeA = nodeA.next;
                m--;
            }
        } else {
             while(m != n) {
                nodeB = nodeB.next;
                 n--;
            }
        }
        while(nodeA != nodeB) {
             nodeA = nodeA.next;
             nodeB = nodeB.next;
        }
        return nodeA;
        
        
       /* HashSet<ListNode> set = new HashSet<>();
        while(headA != null) {
            set.add(headA);
            headA = headA.next;
        }
        
        while(headB != null) {
            if(set.contains(headB)) {
                return headB;
            }
            headB = headB.next;
        }
        return null;
        */
        /*ListNode nodeA = headA;
        ListNode nodeB = headB;
        
        while(nodeA != nodeB) {
            nodeA = (nodeA != null) ? nodeA.next : headB;
            nodeB = (nodeB != null) ? nodeB.next : headA;
        }
        
        return nodeA;*/
        
       //brute force
      /*  ListNode nodeB = null;
        while(headA != null) {
            nodeB = headB;
            while(nodeB != null) {
                if(nodeB == headA) {
                    return nodeB;
                }
                nodeB = nodeB.next;
            }
            headA = headA.next;
        }
        
        return null;*/
    }
}
